{{- template "base.sh.tmpl" }}

# homebrew
PATH="/usr/local/sbin:$PATH"

eval "$(/opt/homebrew/bin/brew shellenv)"

# homebrew shell completion
if type brew &>/dev/null; then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# brew curl shell completion
fpath=("$(brew --prefix)/opt/curl/share/zsh/site-functions" $fpath)

# clang
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"

# mise
eval "$(/opt/homebrew/opt/mise/bin/mise activate zsh)"

# zoxide
eval "$(zoxide init --cmd j zsh)"

# starship
eval "$(starship init zsh)"

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/projects/dotfiles/tabtab/zsh/__tabtab.zsh ]] && . ~/projects/dotfiles/tabtab/zsh/__tabtab.zsh || true

# go
# TODO: Figure out why $GOPATH is unset when sourcing this file - likely because mise starts up after, but still, would be nice to not have to hard-code
# export GOBIN="~/.local/share/mise/installs/go/1.21.1/packages/bin"

# neovim
alias upgrade_nvim="brew upgrade nvim --fetch-HEAD"

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true

# iterm2
# TODO: Look into using iTerm2 Python scripting functionality to do this logic, so this doesn't run every time I open a new shell, but just whenever opening a new iTerm2 window
# iterm2_print_user_vars() {
#   ip=$(curl -s ifconfig.me | awk '{print $1}')
#   whois_response=$(whois "$ip")
#   iterm2_set_user_var publicIP "$ip"
#   iterm2_set_user_var status $(ping -c 1 google.com >/dev/null && echo "" || echo "OFFLINE")
#   iterm2_set_user_var city $(echo "$whois_response" | sed -n 's/^City: \(.*\)/\1/p' | xargs)
#   iterm2_set_user_var stateProv $(echo "$whois_response" | sed -n 's/^StateProv: \(.*\)/\1/p' | xargs)
#   iterm2_set_user_var country $(echo "$whois_response" | sed -n 's/^Country: \(.*\)/\1/p' | xargs)
#   iterm2_set_user_var orgName $(echo "$whois_response" | sed -n 's/^OrgName: \(.*\)/\1/p' | xargs)
#
#   home_ddns_hostname=$(op item get hfg6pheaifln27gpjqfygrgmsu --fields label=ddns_hostname)
#   homeIP=$(nslookup $home_ddns_hostname 8.8.8.8 | grep "Address" | tail -1 | awk '{print $2}' | tr -d '\n')
#   matches=$([ "$ip" = "$homeIP" ] && echo "HOME-NET" || echo "OUTSIDE-NET")
#   iterm2_set_user_var using_home_ip $(echo "$matches")
# }
#
# is_chezmoi_subshell=$(ps | rg $PPID -m1 | rg "chezmoi" | wc -l | awk '{print $1}')
#
# if [ "$TERM_PROGRAM" = 'iTerm.app' ] && [ -z "$TMUX" ] && [ "$is_chezmoi_subshell" -ne "1" ]; then
#   if command -v op >/dev/null 2>&1; then
#     iterm2_print_user_vars
#   fi
# fi

# initialise completions with ZSH's compinit
autoload -Uz compinit bashcompinit
compinit
bashcompinit

# TODO: See about moving this either into base.sh.tmpl or another template file - since this needs to be called after compinit
# aws cli
complete -C '/usr/local/bin/aws_completer' aws

# terraform
complete -o nospace -C /opt/homebrew/bin/terraform terraform

# 1password
eval "$(op completion zsh)"
compdef _op op

# direnv
eval "$(direnv hook zsh)"

# vscode-xml lemminx
export PATH="$PATH:$HOME/.config/vscode-xml"

# WORK
{{- if eq .homeOrWork "work" -}}
# rancher desktop
export PATH="$PATH:$HOME/.rd/bin"

# composer
export PATH="$PATH:$(composer global config bin-dir --absolute --quiet)"

# jira-cli
# TODO: Enable once I figure out a difference mechanism for making these available to environment across entire system, rather than re-export these every time a new shell is created
# if command -v op >/dev/null 2>&1; then
#   string=$(op item get nzd745uynzi2xs3reubrgfsfmq --reveal --fields label=hostname,email,api_token)
#
#   secrets=(${(s:,:)string})
#
#   export JIRA_HOSTNAME="${secrets[1]}"
#   export JIRA_API_EMAIL="${secrets[2]}"
#   export JIRA_API_TOKEN="${secrets[3]}"
# fi

# mysql
export PATH=$PATH:/Applications/MySQLWorkbench.app/Contents/MacOS
{{- end -}}
