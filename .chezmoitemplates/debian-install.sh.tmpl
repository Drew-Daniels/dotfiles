#!/bin/bash
. ~/.env

. ~/.local/share/chezmoi/utils.sh

#          ╭──────────────────────────────────────────────────────────╮
#          │                           sudo                           │
#          │                   https://www.sudo.ws/                   │
#          ╰──────────────────────────────────────────────────────────╯
# TODO: Confirm if 'sudo' package actually needs to be installed through apt (as part of mise installation step)

sudo apt update -y
sudo apt upgrade -y

# TODO: Look into creating bash loading spinner library similar to:
#   https://github.com/molovo/revolver/blob/master/revolver
#   https://willcarh.art/blog/how-to-write-better-bash-spinners
# TODO: Add logging to indicate overall progress

# Check if the current user is a sudoer
if sudo -l &>/dev/null; then
  echo "The current user has sudo privileges."
else
  echo "The current user does not have sudo privileges."
  exit 1
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           wget                           │
#          │             https://gitlab.com/gnuwget/wget2             │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled wget; then
  echo "Installing wget"
  sudo apt install -y wget
  echo "Installed wget"
else
  echo "Already installed wget"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           curl                           │
#          │                  https://curl.se/docs/                   │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled curl; then
  echo "Installing curl"
  sudo apt install -y curl
  echo "Installed curl"
else
  echo "Already installed curl"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           gpg                            │
#          │        https://www.gnupg.org/download/index.html         │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled gpg; then
  echo "Installing gpg"
  sudo apt install -y gpg
  echo "Installed gpg"
else
  echo "Already installed gpg"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          cosign                          │
#          │            https://github.com/sigstore/cosign            │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled cosign; then
  echo "Installing cosign"
  curl -sLO "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-x86_64"
  sudo mv cosign-linux-x86_64 /usr/local/bin/cosign
  sudo chmod +x /usr/local/bin/cosign
  echo "Installed cosign"
else
  echo "Already installed cosign"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                            jq                            │
#          │               https://jqlang.org/download/               │
#          ╰──────────────────────────────────────────────────────────╯
#
if uninstalled jq; then
  bin="jq-linux-amd64"
  checksums="sha256sum.txt"

  # TODO: Figure out a way to get and parse latest version without jq installed
  base_url="https://github.com/jqlang/jq/releases/download/jq-1.7.1/"

  curl -sL --remote-name-all "$base_url/${bin}" "${base_url}/${checksums}"

  verified_sha=$(grep "$bin" <"$checksums" | awk '{print $1}')
  download_sha=$(sha256sum "$bin" | awk '{print $1}')

  if [ "$download_sha" != "$verified_sha" ]; then
    echo "Could not install jq - verify checksums"
    exit 1
  fi

  chmod +x "$bin"
  sudo mv "$bin" /usr/local/bin/jq
  rm "$checksums"
  echo "Installed jq"
else
  echo "Already installed jq"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         chezmoi                          │
#          │                 https://www.chezmoi.io/                  │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled chezmoi; then
  echo "Installing chezmoi"
  version=$(curl -sL https://api.github.com/repos/twpayne/chezmoi/releases/latest | jq '.tag_name' | sed 's/"//g' | cut -d 'v' -f2)
  # Download .deb pkg, the checksum file, checksum file signature, and public signing key:
  curl --silent --location --remote-name-all \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_${version}_linux_x86_64.deb" \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_${version}_checksums.txt" \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_${version}_checksums.txt.sig" \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_cosign.pub"

  # verify the signature on the checksums file is valid
  cosign_verification_status=$(cosign verify-blob --key=chezmoi_cosign.pub --signature="chezmoi_${version}_checksums.txt.sig" "chezmoi_${version}_checksums.txt")

  if [ "$cosign_verification_status" -eq 1 ]; then
    echo "Signatures on Chemzoi checksums file is invalid"
    exit 1
  fi

  # verify the checksum matches
  if sha256sum --check "chezmoi_${version}_checksums.txt" --ignore-missing --status; then
    sudo apt install -y "./chezmoi_${version}_linux_x86_64.deb"
    echo "Installed chezmoi"
  else
    echo "Encountered an error "
    exit 1
  fi
else
  echo "chezmoi already installed"
fi

if [ ! -d ~/.local/share/chezmoi ]; then
  echo "Initializing dotfiles"
  # initialize dotfiles
  # github
  # chezmoi init https://github.com/Drew-Daniels/dotfiles.git --apply
  # codeberg
  chezmoi init https://codeberg.org/drewdaniels/dotfiles.git --apply
  echo "Initialized dotfiles"
else
  echo "Already initialized dotfiles"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          rustup                          │
#          │                    https://rustup.rs/                    │
#          ╰──────────────────────────────────────────────────────────╯
pkg="rustup"
if uninstalled $pkg; then
  echo "Installing $pkg"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  # TODO: Restart terminal
  echo "Installed $pkg"
else
  echo "Already installed $pkg"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           mise                           │
#          │                  https://mise.jdx.dev/                   │
#          ╰──────────────────────────────────────────────────────────╯
pkg='mise'
if uninstalled $pkg; then
  echo "Installing $pkg"
  # pre-reqs for building native C ruby extensions
  sudo apt install -y build-essential libz-dev libffi-dev libyaml-dev libssl-dev
  # pre-reqs for mise
  sudo apt install -y sudo
  # mise installation
  sudo install -dm 755 /etc/apt/keyrings
  wget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1>/dev/null
  echo "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=x86_64] https://mise.jdx.dev/deb stable main" | sudo tee /etc/apt/sources.list.d/mise.list
  sudo apt update
  sudo apt install -y $pkg
  echo "Installed $pkg"
else
  echo "Already installed $pkg"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                   git-credential-oauth                   │
#          │     https://github.com/hickford/git-credential-oauth     │
#          ╰──────────────────────────────────────────────────────────╯
#
if uninstalled git-credential-oauth; then
  latest=$(get_latest_gh_release_tag "hickford" "git-credential-oauth" | cut -d 'v' -f2)
  echo "Installing git-credential-oauth"
  tgz="git-credential-oauth_${latest}_linux_amd64.tar.gz"
  curl -sLO "https://github.com/hickford/git-credential-oauth/releases/download/v${latest}/${tgz}"
  # NOTE: Adding 'skip-old-files' option because the archive contains a README.md file that clobbers my own
  tar --skip-old-files -xzf "$tgz"
  chmod +x git-credential-oauth
  sudo mv git-credential-oauth /usr/local/bin/
  rm "$tgz" LICENSE.txt
  echo "Installed git-credential-oauth"
fi

#    ╭──────────────────────────────────────────────────────────────────────╮
#    │                               ripgrep                                │
#    │https://github.com/BurntSushi/ripgrep?tab=readme-ov-file#installation │
#    ╰──────────────────────────────────────────────────────────────────────╯
pkg="ripgrep"
if uninstalled rg; then
  echo "Installing ripgrep"
  latest=$(get_latest_gh_release_tag "BurntSushi" "ripgrep" | cut -d 'v' -f2)
  base_url="https://github.com/BurntSushi/ripgrep/releases/download/${latest}"
  # TODO: Figure out why a -1 is always appended to version?
  deb="$base_url/ripgrep_${latest}-1_amd64.deb"
  sha="$base_url/ripgrep_${latest}-1_amd64.deb.sha256"
  curl --silent --location --remote-name-all "$base_url/$deb" "$base_url/$sha"
  if sha256sum -c "$sha" --status; then
    sudo apt install -y "./$deb"
    rm "$deb" "$sha"
    echo "Upgraded ${pkg}"
  else
    echo "Could not upgrade $pkg - verify checksums"
    exit 1
  fi
else
  echo "Already installed ripgrep"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          delta                           │
#          │       https://github.com/dandavison/delta/releases       │
#          ╰──────────────────────────────────────────────────────────╯
pkg='delta'
if uninstalled $pkg; then
  echo "Installing $pkg"
  latest=$(get_latest_gh_release_tag "dandavison" "delta")
  curl -sLO "https://github.com/dandavison/delta/releases/download/${latest}/git-delta_${latest}_amd64.deb"
  sudo apt install -y ./git-delta_"${latest}"_amd64.deb
  echo "Installed $pkg"
else
  echo "Already installed $pkg"
fi

#╭──────────────────────────────────────────────────────────────────────────────────╮
#│                                     starship                                     │
#│https://github.com/starship/starship?tab=readme-ov-file#%F0%9F%9A%80-installation │
#╰──────────────────────────────────────────────────────────────────────────────────╯
if uninstalled starship; then
  echo "Installing starship"
  cargo install starship --locked
  echo "Installed starship"
else
  echo "Already installed starship"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           fish                           │
#          │                  https://fishshell.com/                  │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled fish; then
  latest_major=$(get_latest_gh_release_tag "fish-shell" "fish-shell" | sed 's/v//g' | cut -c1)
  os_release_no=$(grep VERSION_ID </etc/os-release | cut -d '=' -f2 | sed 's/"//g')
  echo "deb http://download.opensuse.org/repositories/shells:/fish:/release:/${latest_major}/Debian_${os_release_no}/ /" | sudo tee "/etc/apt/sources.list.d/shells:fish:release:${latest_major}.list"
  curl -fsSL "https://download.opensuse.org/repositories/shells:fish:release:${latest_major}/Debian_${os_release_no}/Release.key" | gpg --dearmor | sudo tee "/etc/apt/trusted.gpg.d/shells_fish_release_${latest_major}.gpg" >/dev/null
  sudo apt update
  sudo apt install fish
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           fzf                            │
#          │       https://junegunn.github.io/fzf/installation/       │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled fzf; then
  echo "Installing fzf"
  latest=$(get_latest_gh_release_tag "junegunn" "fzf" | sed 's/v//g')
  base_url="https://github.com/junegunn/fzf/releases/download/v${latest}"
  bin="fzf-${latest}-linux_amd64"
  tgz="$bin.tar.gz"
  checksums="fzf_${latest}_checksums.txt"
  curl -sL --remote-name-all "$base_url/$tgz" "$base_url/$checksums"
  verified_sha=$(grep <"$checksums" linux_amd64.tar.gz)
  download_sha=$(sha256sum "$tgz")

  if [ "$download_sha" != "$verified_sha" ]; then
    echo "Could not install fzf - verify checksums"
    exit 1
  fi

  tar xzf "$tgz"
  sudo mv "$bin" "/usr/local/bin/$bin"

  rm "$tgz" "$checksums"
  echo "Installed fzf"
else
  echo "Already installed fzf"
fi

#          ╭───────────────────────────────────────────────────────────╮
#          │                            fd                             │
#          │https://github.com/sharkdp/fd?tab=readme-ov-file#on-debian │
#          ╰───────────────────────────────────────────────────────────╯
if uninstalled fd; then
  echo "Installing fd"
  latest=$(get_latest_gh_release_tag "sharkdp" "fd" | sed 's/v//g')
  deb="fd_${latest}_amd64.deb"
  curl -sLO "https://github.com/sharkdp/fd/releases/download/v${latest}/${deb}"
  sudo apt install -y "./${deb}"
  rm "$deb"
  echo "Installed fd"
else
  echo "Already installed fd"
fi

#╭───────────────────────────────────────────────────────────────────────────────────────────╮
#│                                            bat                                            │
#│https://github.com/sharkdp/bat?tab=readme-ov-file#on-ubuntu-using-most-recent-deb-packages │
#╰───────────────────────────────────────────────────────────────────────────────────────────╯
if uninstalled bat; then
  echo "Installing bat"
  latest=$(get_latest_gh_release_tag "sharkdp" "bat" | sed 's/v//g')
  deb="bat_${latest}_amd64.deb"
  curl -sLO "https://github.com/sharkdp/bat/releases/download/v${latest}/${deb}"
  sudo apt install -y "./${deb}"
  rm "$deb"
  echo "Installed bat"
else
  echo "Already installed bat"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                        bat-extras                        │
#          │     https://github.com/eth-p/bat-extras/tree/master      │
#          ╰──────────────────────────────────────────────────────────╯
pkg="bat-extras"
if uninstalled batgrep; then
  echo "Installing $pkg"
  cd ~/projects || exit
  git clone https://github.com/eth-p/$pkg.git ~/projects/bat-extras
  cd $pkg || exit
  ./build.sh --install
  cd ~ || exit
  echo "Installed $pkg"
else
  echo "Installed $pkg"
fi

#       ╭────────────────────────────────────────────────────────────────╮
#       │                             ctags                              │
#       │https://github.com/universal-ctags/ctags-nightly-build/releases │
#       ╰────────────────────────────────────────────────────────────────╯
pkg="ctags"
if uninstalled ctags; then
  echo "Installing $pkg"
  latest_tag_name=$(curl -sL https://api.github.com/repos/universal-ctags/ctags-nightly-build/releases/latest | jq '.tag_name' | sed 's/"//g')
  latest_release_date=$(echo "$latest_tag_name" | cut -d '+' -f1)
  latest_SHA_full=$(echo "$latest_tag_name" | cut -d '+' -f2)
  curl -sLO "https://github.com/universal-ctags/ctags-nightly-build/releases/download/${latest_release_date}%2B${latest_SHA_full}/uctags-${latest_release_date}-linux-x86_64.deb"
  sudo apt install -y "./uctags-${latest_release_date}-linux-x86_64.deb"
  rm "./uctags-${latest_release_date}-linux-x86_64.deb"
  echo "Installed $pkg"
else
  echo "Already installed $pkg"
fi

#╭──────────────────────────────────────────────────────────────────────────────╮
#│                                    awscli                                    │
#│https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html │
#╰──────────────────────────────────────────────────────────────────────────────╯

# NOTE: There is not currently a way to programmatically get the AWS public key, so have to install without
# verifying in programmic install
# https://github.com/aws/aws-cli/issues/6230
if uninstalled aws; then
  echo "Installing awscli"
  curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  unzip awscliv2.zip
  sudo ./aws/install
  echo "Installed awscli"
else
  echo "Already installed awscli"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                       wl-clipboard                       │
#          │         https://github.com/bugaevc/wl-clipboard          │
#          ╰──────────────────────────────────────────────────────────╯
# allows neovim to access clipboard via wayland
if uninstalled wl-copy; then
  echo "Installing wl-clipboard"
  sudo apt install -y wl-clipboard
  echo "Installed wl-clipboard"
else
  echo "Already installed wl-clipboard"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         lua 5.1                          │
#          │        https://www.lua.org/manual/5.4/readme.html        │
#          ╰──────────────────────────────────────────────────────────╯
version="5.1.5"
current=$(lua -v 2>&1 | cut -d ' ' -f2)
if [ "$current" != "$version" ]; then
  echo "Installing lua v5.1.5"
  # install build dependencies
  sudo apt-get install libreadline-dev
  # download
  curl -sLO https://www.lua.org/ftp/lua-${version}.tar.gz
  cd lua-${version} || exit
  # build
  make linux
  # verify
  make test
  # install
  sudo make install
  # cleanup
  rm -rf lua-5.1.5*
  cd ~ || exit
  echo "Installed lua v5.1.5"
else
  echo "Already installed lua v5.1.5"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         luarocks                         │
#          │                  https://luarocks.org/                   │
#          ╰──────────────────────────────────────────────────────────╯
version="3.11.1"
if uninstalled luarocks; then
  echo "Installing luarocks"
  wget https://luarocks.org/releases/luarocks-${version}.tar.gz
  tar zxpf luarocks-${version}.tar.gz
  cd "luarocks-${version}" || exit
  ./configure
  make
  sudo make install
  sudo luarocks install luasocket
  cd ~ || exit
  echo "Installed luarocks"
else
  echo "Already installed luarocks"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                 jetbrains-mono-nerd-font                 │
#          │            https://www.jetbrains.com/lp/mono/            │
#          ╰──────────────────────────────────────────────────────────╯
if [ ! -e ~/.local/share/fonts/JetBrainsMonoNerdFont-Regular.ttf ]; then
  echo "Installing JetBrainsMonoNerdFont"
  latest=$(get_latest_gh_release_tag "ryanoasis" "nerd-fonts" | cut -d 'v' -f2)
  wget -P "$HOME/.local/share/fonts" "https://github.com/ryanoasis/nerd-fonts/releases/download/v${latest}/JetBrainsMono.zip"
  cd ~/.local/share/fonts || exit
  if unzip JetBrainsMono.zip; then
    rm JetBrainsMono.zip
    fc-cache -fv
  else
    echo "Failed to unzip JetBrainsMono.zip"
    exit 1
  fi
  cd ~ || exit
  echo "Installed JetBrainsMonoNerdFont"
else
  echo "Already installed JetBrainsMonoNerdFont"
fi
#        ╭───────────────────────────────────────────────────────────────╮
#        │                            neovim                             │
#        │https://github.com/neovim/neovim/blob/master/INSTALL.md#debian │
#        ╰───────────────────────────────────────────────────────────────╯
if uninstalled nvim; then
  echo "Installing neovim"
  pkg_name="nvim-linux-x86_64.tar.gz"
  checksums_filename="shasum.txt"
  base_repo_path="https://github.com/neovim/neovim/releases/latest/download/"

  curl -sLO "$base_repo_path/$pkg_name" -O "$base_repo_path/$checksums_filename"

  download_checksum=$(sha256sum "$pkg_name")
  verified_checksum=$(grep "linux-x86_64.tar" <shasum.txt)

  if [ "$download_checksum" == "$verified_checksum" ]; then
    echo "Neovim checksum verified"
    sudo rm -rf /opt/nvim
    sudo tar -C /opt -xzf "$pkg_name"
    rm "$pkg_name" "$checksums_filename"
    echo "Installed neovim"
  else
    echo "Could not install neovim - verify checksums"
  fi
else
  echo "Already installed neovim"
fi

# update sudoers file so I can use neovim as root
# sudo visudo

# in sudoers file, set these lines
# Defaults    secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/nvim-linux-x86_64/bin"
#
# # use neovim as default editor with root
# Defaults:%sudo env_keep += "EDITOR"

#         ╭─────────────────────────────────────────────────────────────╮
#         │                            tmux                             │
#         │https://github.com/tmux/tmux/wiki/Installing#binary-packages │
#         ╰─────────────────────────────────────────────────────────────╯
#
if uninstalled tmux; then
  echo "Installing tmux build dependencies"
  sudo apt install -y libevent-dev ncurses-dev build-essential bison pkg-config
  echo "Installing tmux"
  latest=$(get_latest_gh_release_tag "tmux" "tmux")
  tgz="tmux-${latest}.tar.gz"
  curl -sLO "https://github.com/tmux/tmux/releases/download/${latest}/${tgz}"
  tar -zxf tmux-*.tar.gz
  cd tmux-*/ || exit
  ./configure
  make && sudo make install
  echo "Installed tmux"
else
  echo "Already installed tmux"
fi

#     ╭─────────────────────────────────────────────────────────────────────╮
#     │                             tmuxinator                              │
#     │https://github.com/tmuxinator/tmuxinator?tab=readme-ov-file#rubygems │
#     ╰─────────────────────────────────────────────────────────────────────╯

if uninstalled tmuxinator; then
  echo "Installing tmuxinator"
  gem install tmuxinator
  echo "Installed tmuxinator"
else
  echo "Already installed tmuxinator"
fi

#        ╭──────────────────────────────────────────────────────────────╮
#        │                          alacritty                           │
#        │https://github.com/alacritty/alacritty/blob/master/INSTALL.md │
#        ╰──────────────────────────────────────────────────────────────╯
# NOTE: There are no precompiled binaries for linux. Need to build from source.
if uninstalled alacritty; then
  echo "Installing alacritty"
  git clone https://github.com/alacritty/alacritty.git ~/projects/alacritty
  cd ~/projects/alacritty || exit
  rustup override set stable
  rustup update stable

  # install pre-reqs
  sudo apt install -y cmake g++ pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev scdoc desktop-file-utils

  # build
  cargo build --release

  # post-build
  sudo cp target/release/alacritty /usr/local/bin
  sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
  sudo desktop-file-install extra/linux/Alacritty.desktop
  sudo update-desktop-database

  # go back ~
  cd ~ || exit
  echo "Installed alactritty"
else
  echo "Already installed alacritty"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                       imagemagick                        │
#          │        https://github.com/ImageMagick/ImageMagick        │
#          ╰──────────────────────────────────────────────────────────╯
# TODO: Create a security policy following guide here: https://imagemagick.org/script/security-policy.php
if uninstalled magick; then
  echo "Installing imagemagick"
  # TODO: Use this logic everywhere else that I am interpolating version numbers, commit SHAs, etc. - seems more foolproof
  latest_download_url=$(curl -sL https://api.github.com/repos/ImageMagick/ImageMagick/releases/latest | jq '.assets[] | select(.name | contains("clang-x86_64.AppImage")) | .browser_download_url' | sed 's/"//g')
  curl -L "$latest_download_url" -o magick
  chmod +x magick
  sudo mv magick /usr/local/bin/
  echo "Installed imagemagick"
else
  echo "Already installed imagemagick"
fi

verify_fingerprint() {
  cat "$1"
  printf "\n"

  while true; do
    read -p "Does the fingerprint printed above match the one GPG prnted previously?" yesno
    case $yesno in
    [Yy]*)
      # Continue...
      break
      ;;
    [Nn]*)
      echo "Exiting: Fingerprint does not match"
      exit
      ;;
    *) echo "Answer either yes or no!" ;;
    esac
  done
}

approve_script_execution() {
  cat "$1"
  printf "\n"

  while true; do
    read -p "Does the above script look safe?" yesno
    case $yesno in
    [Yy]*)
      chmod +x "$1"
      break
      ;;
    [Nn]*)
      exit
      ;;
    *) echo "Answer either yes or no!" ;;
    esac
  done
}

#          ╭──────────────────────────────────────────────────────────╮
#          │                          zoxide                          │
#          │          https://github.com/ajeetdsouza/zoxide           │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled zoxide; then
  echo "Installing zoxide"
  curl -sSfLO https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh

  approve_script_execution "install.sh"

  ./install.sh

  rm install.sh

  echo "Installed zoxide"
else
  echo "Already installed zoxide"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          resvg                           │
#          │           https://github.com/linebender/resvg            │
#          ╰──────────────────────────────────────────────────────────╯
# NOTE: Library used to display SVG images in yazi
# NOTE: Installing via crates.io because downloading the plain binary requires an incompatible glibc version than version required by Debian Bookworm
# resvg: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.38' not found (required by resvg
if uninstalled resvg; then
  echo "Installing resvg"
  cargo install --locked resvg
  echo "Installed resvg"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           yazi                           │
#          │   https://yazi-rs.github.io/docs/installation/#crates    │
#          ╰──────────────────────────────────────────────────────────╯
# TODO: Look into just downloading binary instead of using crates.io (eliminate manual build step)
# NOTE: Can't do this ^ until upgrading to next major debian release
# https://github.com/sxyazi/yazi/releases/download/v25.4.8/yazi-x86_64-unknown-linux-gnu.zip
if uninstalled yazi; then
  echo "Installing yazi"
  # install deps
  sudo apt install -y ffmpeg 7zip poppler-utils
  # install yazi
  cargo install --locked yazi-fm yazi-cli
  echo "Installed yazi"
else
  echo "Already installed yazi"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          jless                           │
#          │                    https://jless.io/                     │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled jless; then
  echo "Installing jless"
  cargo install jless
  echo "Installed jless"
else
  echo "Already installed jless"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                            yq                            │
#          │             https://github.com/mikefarah/yq              │
#          ╰──────────────────────────────────────────────────────────╯

if uninstalled yq; then
  echo "Installing yq"
  latest=$(get_latest_gh_release_tag "mikefarah" "yq")
  base_url="https://github.com/mikefarah/yq/releases/download/${latest}"
  curl --silent --location --remote-name-all "$base_url/yq_linux_amd64.tar.gz" "$base_url/extract-checksum.sh" "$base_url/checksums_hashes_order" "$base_url/checksums"

  # NOTE: Adding echo to put a newline after script contents, for readability
  cat extract-checksum.sh && printf '\n\n'

  approve_script_execution "extract-checksum.sh"

  if ./extract-checksum.sh SHA-256 yq_linux_amd64.tar.gz | awk '{ print $2 " " $1}' | sha256sum -c --status; then
    tar xzf "yq_linux_amd64.tar.gz"
    sudo mv yq_linux_amd64 /usr/local/bin/yq
    rm yq_linux_amd64.tar.gz extract-checksum.sh checksums_hashes_order checksums yq.1 install-man-page.sh
    echo "Installed yq"
  else
    echo "Could not install yq - verify checksums"
  fi
else
  echo "Already installed yq"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                      standard notes                      │
#          │         https://standardnotes.com/download/linux         │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled standard-notes; then
  echo "Installing standard notes"
  latest=$(get_latest_gh_release_tag "standardnotes" "app" | cut -d '@' -f3)
  # TODO: Not sure what the 403.195.13 refers to, or if it will change between releases
  base_url="https://github.com/standardnotes/app/releases/download/%40standardnotes%2Fdesktop%403.195.13"
  deb="standard-notes-${latest}-linux-amd64.deb"
  curl -L --remote-name-all "$base_url/$deb" "$base_url/SHA256SUMS"
  verified_checksum=$(rg "linux-amd64.deb" <SHA256SUMS)
  download_checksum=$(sha256sum "$deb")
  if [ "$download_checksum" == "$verified_checksum" ]; then
    sudo apt install -y "./$deb"
    rm "$deb" "SHA256SUMS"
    echo "Installed standard notes"
  else
    echo "Could not install Standard Notes - verify checksums"
  fi
else
  echo "Already installed standard notes"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                      docker desktop                      │
#          │   https://docs.docker.com/desktop/setup/install/linux/   │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled docker; then
  echo "Installing docker"
  sudo apt install -y gnome-terminal

  # Add Docker's official GPG key:
  sudo apt-get update
  sudo apt-get install ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc

  # Add the repository to Apt sources:
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |
    sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  sudo apt-get update

  # Install Docker Packages
  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # Download latest release
  curl -sLO https://desktop.docker.com/linux/main/amd64/docker-desktop-amd64.deb

  # Install
  sudo apt install -y ./docker-desktop-amd64.deb

  systemctl --user start docker-desktop
  # https://stackoverflow.com/a/73564032/13175926
  # NOTE: If I get an "Can't connect to Docker Daemon" error, run:
  # docker context use default
  echo "Installed docker"
else
  echo "Already installed docker"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                      OpenSSH Server                      │
#          │                 https://www.openssh.com/                 │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled ssh; then
  sudo apt install -y openssh-server
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          restic                          │
#          │             https://github.com/restic/restic             │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled restic; then
  latest=$(get_latest_gh_release_tag "restic" "restic" | cut -d 'v' -f2)
  echo "Installing restic"
  base_url="https://github.com/restic/restic/releases/download/v${latest}/"
  zip="restic_${latest}_linux_amd64.bz2"
  signed_checksums="SHA256SUMS.asc"
  checksums="SHA256SUMS"
  curl -sL https://restic.net/gpg-key-alex.asc | gpg --import
  gpg --lsign-key CF8F18F2844575973F79D4E191A6868BD3F7A907
  curl -sL --remote-name-all "$base_url/$zip" "$base_url/$checksums" "$base_url/$signed_checksums"
  if ! gpg --verify SHA256SUMS.asc SHA256SUMS; then
    echo "Invalid GPG signature"
    exit 1
  fi
  verified_checksum=$(grep linux_amd64.bz2 <"$checksums")
  download_checksum=$(sha256sum "$zip")
  if [ "$download_checksum" != "$verified_checksum" ]; then
    echo "Could not install restic - verify checksums"
    exit 1
  fi
  sudo restic generate --bash-completion /usr/share/bash-completion/completions/restic
  echo "Installed restic"
else
  echo "Already installed restic"
fi

# NOTE: fish completions are already stored in dotfiles

#          ╭──────────────────────────────────────────────────────────╮
#          │                      resticprofile                       │
#          │    https://github.com/creativeprojects/resticprofile     │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled resticprofile; then
  echo "Installing resticprofile"
  latest=$(get_latest_gh_release_tag "creativeprojects" "resticprofile" | cut -d 'v' -f2)
  current=$(resticprofile version | cut -d ' ' -f3)
  base_url="https://github.com/creativeprojects/resticprofile/releases/download/v${latest}/"
  tgz="resticprofile_${latest}_linux_amd64.tar.gz"
  checksums="checksums.txt"
  curl -sL --remote-name-all "$base_url/$tgz" "$base_url/$checksums"
  verified_checksum=$(grep "no_self_update_${latest}_linux_amd64.tar.gz" <"$checksums")
  download_checksum=$(sha256sum "$tgz")
  if [ "$download_checksum" != "$verified_checksum" ]; then
    echo "Could not upgrade resticprofile - verify checksums"
    exit 1
  fi
  mkdir "resticprofile_${latest}_linux_amd64"
  tar -xzpf "resticprofile_${latest}_linux_amd64.tar.gz" -C "resticprofile_${latest}_linux_amd64"
  sudo cp "resticprofile_${latest}_linux_amd64/resticprofile" /usr/local/bin/
  rm -rf restic* "$checksums"
  echo "Installed resticprofile"
else
  echo "Already installed resticprofile"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           dust                           │
#          │             https://github.com/bootandy/dust             │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled dust; then
  echo "Installing dust"
  cargo install du-dust
  echo "Installed dust"
else
  echo "Already installed dust"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          kiwix                           │
#          │       https://tracker.debian.org/teams/kiwix-team/       │
#          ╰──────────────────────────────────────────────────────────╯
# TODO: Look into building from source to get latest release: https://github.com/kiwix/kiwix-desktop?tab=readme-ov-file#dependencies
if uninstalled kiwix-desktop; then
  echo "Installing kiwix-desktop"
  sudo apt install -y kiwix
  echo "Installed kiwix-desktop"
else
  echo "Already installed kiwix-desktop"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           wofi                           │
#          │            https://github.com/davatorium/wofi            │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled wofi; then
  echo "Installing wofi"
  sudo apt install -y wofi
  echo "Installed wofi"
else
  echo "Already installed wofi"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                      speedtest-cli                       │
#          │          https://github.com/sivel/speedtest-cli          │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled speedtest-cli; then
  sudo apt install -y speedtest-cli
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                       uuid-runtime                       │
#          │       https://packages.debian.org/sid/uuid-runtime       │
#          ╰──────────────────────────────────────────────────────────╯
# NOTE: For creating unique identifiers (like when working with S3)
if uninstalled uuidgen; then
  echo "Installing uuidgen"
  sudo apt install -y uuid-runtime
  echo "Installed uuidgen"
else
  echo "Already installed uuidgen"
fi

# ╭───────────────────────────────────────────────────────────╮
# │                          # sway                           │
# │                   # https://swaywm.org/                   │
# ╰───────────────────────────────────────────────────────────╯
if uninstalled sway; then
  echo "Installing sway"
  sudo apt install -y sway
  echo "Installed sway"
fi

# swaylock
# https://github.com/swaywm/swaylock
if uninstalled swaylock; then
  echo "Installing swaylock"
  sudo apt install -y swaylock
  echo "Installed swaylock"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                      brightnessctl                       │
#          │       https://github.com/Hummer12007/brightnessctl       │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled brightnessctl; then
  echo "Installing brightnessctl"
  sudo usermod -aG video "$USER"
  sudo apt install -y brightnessctl
  echo "Installed brightnessctl"
else
  echo "Already installed brightnessctl"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                        strawberry                        │
#          │   https://github.com/strawberrymusicplayer/strawberry    │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled strawberry; then
  echo "Installing strawberry"
  latest=$(get_latest_gh_release_tag "strawberrymusicplayer" "strawberry" | cut -d 'v' -f2)
  os_release_codename=$(grep VERSION_CODENAME </etc/os-release | cut -d '=' -f2)
  deb="strawberry_${latest}-${os_release_codename}_amd64.deb"
  curl -sLO "https://github.com/strawberrymusicplayer/strawberry/releases/download/${latest}/${deb}"
  sudo apt install -y "./$deb"
  rm "$deb"
  echo "Installed strawberry"
else
  echo "Already installed strawberry"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           feh                            │
#          │               https://github.com/derf/feh                │
#          ╰──────────────────────────────────────────────────────────╯
# TODO: Look into building feh from source: https://feh.finalrewind.org/
if uninstalled feh; then
  echo "Installing feh"
  sudo apt install -y feh
  echo "Installed feh"
else
  echo "Already installed feh"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                        xmlstarlet                        │
#          │       https://xmlstar.sourceforge.net/download.php       │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled xmlstarlet; then
  echo "Installing xmlstarlet"
  sudo apt install xmlstarlet
  echo "Installed xmlstarlet"
else
  echo "Already installed xmlstarlet"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         mergiraf                         │
#          │          https://mergiraf.org/installation.html          │
#          ╰──────────────────────────────────────────────────────────╯
# NOTE: Installing via crates.io because of glibc compatibility issue with Debian bookworm
# mergiraf: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.39' not found (required by mergiraf)
if uninstalled mergiraf; then
  echo "Installing mergiraf"
  cargo install --locked mergiraf
  echo "Installed mergiraf"
else
  echo "Already installed mergiraf"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           nmap                           │
#          │                https://svn.nmap.org/nmap/                │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled nmap; then
  echo "Installing nmap"
  sudo apt install -y nmap
  echo "Installed nmap"
else
  echo "Already installed nmap"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         thorium                          │
#          │          https://github.com/Alex313031/thorium           │
#          ╰──────────────────────────────────────────────────────────╯
pkg="thorium-browser"
if uninstalled $pkg; then
  echo "Installing thorium"
  if [ ! -f "/etc/apt/sources.list.d/thorium.list" ]; then
    sudo wget --no-hsts -P /etc/apt/sources.list.d/ \
      http://dl.thorium.rocks/debian/dists/stable/thorium.list
  fi
  sudo apt update
  sudo apt install -y "$pkg"
  echo "Installed thorium"
else
  echo "Already installed thorium"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         openvpn                          │
#          │            https://github.com/OpenVPN/openvpn            │
#          ╰──────────────────────────────────────────────────────────╯
# usage: sudo openvpn <config>
if [ ! -x /sbin/openvpn ]; then
  echo "Installing openvpn"
  sudo apt install -y openvpn
  echo "Installing openvpn"
else
  echo "Already installed openvpn"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                        wireguard                         │
#          │            https://www.wireguard.com/install/            │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled wg; then
  echo "Installing wireguard"
  sudo apt install -y wireguard
  echo "Installed wireguard"
else
  echo "Already installed wireguard"
fi
# Notes on creating and using client configurations
# # Create and download client configuration file from Wireguard server
# # move into wireguard configuration folder
# sudo mv client.conf /etc/wireguard/wg0.conf
# # import the client profile
# sudo nmcli connection import type wireguard file "/etc/wireguard/wg0.conf"
# # to stop the connection
# nmcli connection stop wg0
# # to start again
# nmcli connection start wg0
# # don't autoconnect on startup
# nmcli connection modify wg0 autoconnect no

#          ╭──────────────────────────────────────────────────────────╮
#          │                         plocate                          │
#          │                https://plocate.sesse.net/                │
#          ╰──────────────────────────────────────────────────────────╯
# NOTE: Provides `updatedb` and `locate` commands - alternative to `locate`
if uninstalled plocate; then
  echo "Installing plocate"
  sudo apt install -y plocate
  echo "Installed plocate"
else
  echo "Already installed plocate"
fi

# NOTE: Miscellaneous notes on unmounting and shutting down USB drives
# # unmount
# sudo eject /dev/sdb
# # shut down
# udisksctl power-off -b /dev/sdb
# physically pull out USB

#          ╭──────────────────────────────────────────────────────────╮
#          │                           zoom                           │
#          │            https://zoom.us/download?os=linux             │
#          ╰──────────────────────────────────────────────────────────╯
# version='6.4.0.471'
#
# if uninstalled zoom; then
#   echo "Installing zoom"
#   curl -sLO https://zoom.us/client/${version}/zoom_amd64.deb
#   sudo apt install -y ./zoom_amd64.deb
#   echo "Installed zoom"
# else
#   echo "Already installed zoom"
# fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                      keep-presence                       │
#          │        https://github.com/carrot69/keep-presence         │
#          ╰──────────────────────────────────────────────────────────╯
# for keeping computer awake during long-running processes
# TODO: Fix check here - this isn't a globally available command, has to be run with python3 -m "keep_presence"
if uninstalled keep-presence; then
  echo "Installing keep-presence"
  python3 -m pip install keep_presence
  echo "Installed keep-presence"
else
  echo "Already installed keep-presence"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                       tidal-dl-ng                        │
#          │          https://github.com/exislow/tidal-dl-ng          │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled tidal-dl-ng; then
  echo "Installing tidal-dl-ng"
  pip install --upgrade tidal-dl-ng[gui]
  echo "Installed tidal-dl-ng"
else
  echo "Already installed tidal-dl-ng"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                           cmus                           │
#          │               https://github.com/cmus/cmus               │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled cmus; then
  echo "Installing cmus"
  sudo apt install -y cmus
  echo "Installed cmus"
else
  echo "Already installed cmus"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          cmusfm                          │
#          │              https://github.com/Arkq/cmusfm              │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled cmusfm; then
  echo "Installing cmusfm"
  # install dependencies
  sudo apt install -y libcurl4-openssl-dev libnotify-dev
  # configure
  autoreconf --install
  mkdir build && cd build || exit
  ../configure --enable-libnotify
  # build & install
  make && make install
  cd ~ || exit
  echo "Installed cmusfm"
else
  echo "Already installed cmusfm"
fi

# NOTE: Post-installation steps
# create cmusfm config (if one doesn't already exist)
# cmusfm init
# # set as status display program for cmus
# cmus
# # ... in cmus ...
# :set status_display_program=cmusfm

#          ╭──────────────────────────────────────────────────────────╮
#          │                        librewolf                         │
#          │        https://librewolf.net/installation/debian/        │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled librewolf; then
  echo "Installing librewolf"
  sudo extrepo enable librewolf
  sudo apt update && sudo apt install librewolf -y
  echo "Installed librewolf"
else
  echo "Already installed librewolf"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         mullvad                          │
#          │        https://mullvad.net/en/download/vpn/linux         │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled mullvad; then
  echo "Installing mullvad"
  # TODO: Check if mullvad keyring is already installed, and listed as a repository

  # Download the Mullvad signing key
  sudo curl -fsSLo /usr/share/keyrings/mullvad-keyring.asc https://repository.mullvad.net/deb/mullvad-keyring.asc
  # Add the Mullvad repository server to apt
  echo "deb [signed-by=/usr/share/keyrings/mullvad-keyring.asc arch=$(dpkg --print-architecture)] https://repository.mullvad.net/deb/stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/mullvad.list
  # Install the package
  sudo apt update
  sudo apt install -y mullvad-vpn
  echo "Installed mullvad"
else
  echo "Already installed mullvad"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         foliate                          │
#          │         https://johnfactotum.github.io/foliate/          │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled foliate; then
  echo "Installing foliate"
  sudo apt install -y foliate
  echo "Installed foliate"
else
  echo "Already installed foliate"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                pulse audio volume control                │
#          │ https://freedesktop.org/software/pulseaudio/pavucontrol/ │
#          ╰──────────────────────────────────────────────────────────╯
# NOTE: Tried downloading latest version, building, and installing manually but some of the build time dependencies are incompatible with my current Debian version
if uninstalled pavucontrol; then
  echo "Installing pavucontrol"
  sudo apt install -y pavucontrol
  echo "Installed pavucontrol"
else
  echo "Already installed pavucontrol"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                        usbimager                         │
#          │           https://gitlab.com/bztsrc/usbimager            │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled usbimager; then
  echo "Installing usbimager"
  curl -sLO https://gitlab.com/bztsrc/usbimager/-/raw/binaries/usbimager_1.0.10-amd64.deb
  apt install -y ./usbimager_1.0.10-amd64.deb
  rm usbimager_1.0.10-amd64.deb
  echo "Installed usbimager"
else
  echo "Already installled usbimager"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                    gnome-disk-utility                    │
#          │    https://gitlab.gnome.org/GNOME/gnome-disk-utility     │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled gnome-disks; then
  echo "Installing gnome-disk-utility"
  sudo apt install gnome-disk-utility
  echo "Installed gnome-disk-utility"
else
  echo "Already installed gnome-disk-utility"
fi

# TODO: Look into using LUKS instead

#          ╭──────────────────────────────────────────────────────────╮
#          │                          zulip                           │
#          │   https://chat.fhir.org/help/desktop-app-install-guide   │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled zulip; then
  echo "Installing zulip"
  sudo curl -fL -o /etc/apt/trusted.gpg.d/zulip-desktop.asc \
    https://download.zulip.com/desktop/apt/zulip-desktop.asc
  echo "deb https://download.zulip.com/desktop/apt stable main" |
    sudo tee /etc/apt/sources.list.d/zulip-desktop.list
  sudo apt update
  sudo apt install zulip
  echo "Installed zulip"
else
  echo "Already installed zulip"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          signal                          │
#          │            https://signal.org/download/linux/            │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled signal-desktop; then
  # 1. Install our official public software signing key:
  wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor >signal-desktop-keyring.gpg
  cat signal-desktop-keyring.gpg | sudo tee /usr/share/keyrings/signal-desktop-keyring.gpg >/dev/null

  # 2. Add our repository to your list of repositories:
  echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |
    sudo tee /etc/apt/sources.list.d/signal-xenial.list

  # 3. Update your package database and install Signal:
  sudo apt update && sudo apt install signal-desktop

  # 4. cleanup
  rm signal-desktop-keyring.gpg
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          beets                           │
#          │             https://github.com/beetbox/beets             │
#          ╰──────────────────────────────────────────────────────────╯

if uninstalled beet; then
  pip install beets
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         neomutt                          │
#          │                   https://neomutt.org/                   │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled neomutt; then
  # TODO: Look into alternative installation methods to get more recent versions
  sudo apt install -y neomutt
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         newsboat                         │
#          │                  https://newsboat.org/                   │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled newsboat; then
  # TODO: Look into alternative installation methods to get more recent versions
  sudo apt install -y newsboat
fi

if uninstalled electrum; then
  # TODO: Fetch the latest release
  base_url="https://download.electrum.org/4.5.8"
  pub_keys_url="https://raw.githubusercontent.com/spesmilo/electrum/master/pubkeys"
  latest="4.5.8"

  app="electrum-${latest}-x86_64.AppImage"

  curl -sL "$pub_keys_url/ThomasV.asc" | gpg --import
  curl -sL "$pub_keys_url/sombernight_releasekey.asc" | gpg --import
  curl -sL "$pub_keys_url/Emzy.asc" | gpg --import

  # ThomasV
  gpg --lsign-key '6694D8DE7BE8EE5631BED9502BD5824B7F9470E6'

  # sombernight_releasekey
  gpg --lsign-key '0EEDCFD5CAFB459067349B23CA9EEEC43DF911DC'

  # Emzy
  gpg --lsign-key '9EDAFF80E080659604F4A76B2EBB056FD847F8A7'

  curl -sL --remote-name-all "$base_url/$app" "$base_url/$app.asc"

  if gpg --verify "$app.asc" "$app" >/dev/null 2>&1; then
    echo "Installing electrum"
    chmod +x "$app"
    sudo mv "$app" /usr/local/bin/electrum
    echo "Installed electrum"
  else
    echo "Invalid signature"
  fi
else
  echo "Already installed electrum"
fi

# nvme-cli
# https://github.com/linux-nvme/nvme-cli

if uninstalled nvme; then
  sudo apt install -y nvme-cli
fi

# cryptsetup
# https://www.man7.org/linux/man-pages/man8/cryptsetup.8.html
if ! sudo which cryptsetup >/dev/null; then
  sudo apt install -y cryptsetup
fi

# swayr
# https://sr.ht/~tsdh/swayr/
if uninstalled swayr; then
  cargo install --locked swayr
fi

# swayrbar
# https://sr.ht/~tsdh/swayr/
if uninstalled swayrbar; then
  cargo install --locked swayrbar
fi

# cargo-update
# https://github.com/nabijaczleweli/cargo-update
# TODO: Figure out how to check if this is already installed
cargo install cargo-update >/dev/null

if ! gpg --list-keys drew@ddevault.org >/dev/null 2>&1; then
  curl -sL "https://drewdevault.com/publickey.txt" | gpg --import
  unverified_fingerprint=$(
    gpg --list-keys --with-fingerprint drew@ddevault.org | head -n2 | tail -n1 | tr -d ' '
  )
  verified_fingerprint=$(echo "9FB5 E737 DC25 B29D 8EEC  4691 42F3 F186 2E3C C4B8" | tr -d ' ')

  if [ "$unverified_fingerprint" = "$verified_fingerprint" ]; then
    gpg --lsign-key drew@ddevault.org
  else
    echo "Imported public key fingerprint did not match previously verified fingerprint"
    gpg --delete-key drew@ddevault.org
    exit 1
  fi
fi

# swayidle
# https://github.com/swaywm/swayidle
if uninstalled swayidle; then
  sudo apt install -y swayidle
fi

# OBS Studio
# https://github.com/obsproject/obs-studio
if uninstalled obs; then
  sudo apt install -y obs-studio
fi

# Proton Mail Desktop
# https://proton.me/mail/download
# TODO: Verify right way to check installed
if uninstalled proton-mail; then
  deb="ProtonMail-desktop-beta.deb"
  curl -LO "https://proton.me/download/mail/linux/1.8.0/$deb"
  sudo apt install -y "./$deb"
fi

# Proton Mail Bridge
# https://proton.me/mail/bridge
# TODO: Figure out how to get the latest version
if uninstalled protonmail-bridge; then
  echo "Installing Proton Mail Bridge"
  deb="protonmail-bridge_3.20.0-1_amd64.deb"
  curl -#LO "https://proton.me/download/bridge/$deb"
  sudo apt install -y "./$deb"
  echo "Installed Proton Mail Bridge"
fi

# bemenu
# https://github.com/Cloudef/bemenu
if uninstalled bemenu; then
  sudo apt install -y bemenu
fi

# direnv
# https://direnv.net/docs/installation.html
if uninstalled direnv; then
  sudo apt install -y direnv
fi

# phpactor
# https://phpactor.readthedocs.io/en/master/usage/standalone.html#global-installation
if uninstalled phpactor; then
  curl -Lo phpactor.phar https://github.com/phpactor/phpactor/releases/latest/download/phpactor.phar
  chmod a+x phpactor.phar
  sudo mv phpactor.phar /usr/local/bin/phpactor
fi

# stylua
# https://github.com/JohnnyMorganz/StyLua
if uninstalled stylua; then
  cargo install stylua --locked
fi

# clangd - install from GitHub Releases
# https://clangd.llvm.org/installation
if uninstalled clangd; then
  latest=$(get_latest_gh_release_tag "clangd" "clangd")
  base_url="https://github.com/clangd/clangd/releases/download/${latest}"
  zip="clangd-linux-${latest}.zip"
  curl -LO "$base_url/$zip"
  unzip "$zip"
  sudo cp "./clangd_${latest}/bin/clangd" /usr/local/bin/clangd
fi

# microsoft-compose-language-service
# https://github.com/microsoft/compose-language-service/releases
# TODO: Create step to upgrade
latest=$(get_latest_gh_release_tag "microsoft" "compose-language-service" | cut -d '-' -f5 | sed 's/v//g')
if uninstalled docker-compose-langserver; then
  base_url="https://github.com/microsoft/compose-language-service/releases/download/microsoft-compose-language-service-v${latest}/"
  tgz="microsoft-compose-language-service-${latest}.tgz"
  curl -sLO "$base_url/$tgz"
  mkdir extracted
  tar -xzf "$tgz" -C extracted
  sudo cp ./extracted/package/bin/docker-compose-langserver /usr/local/bin/docker-compose-langserver
  sudo chmod +x /usr/local/bin/docker-compose-langserver
  rm -rf extracted "$tgz"
fi

# vscode-langservers-extracted
# https://github.com/hrsh7th/vscode-langservers-extracted
# NOTE: Only installing this globally using NPM because this is not available through a binary/debian packages.
# TODO: Add step to upgrade
if uninstalled vscode-html-language-server; then
  npm i -g vscode-langservers-extracted
fi

# vue-language-server
# https://www.npmjs.com/package/@vue/language-server
if uninstalled vue-language-server; then
  npm i -g @vue/language-server
fi

# basedpyright
# https://github.com/DetachHead/basedpyright
if uninstalled basedpyright; then
  pip install basedpyright
fi

# htmlbeautifier
# https://github.com/threedaymonk/htmlbeautifier
if uninstalled htmlbeautifier; then
  gem install htmlbeautifier
fi

# standard
# https://duckduckgo.com/?q=standard+ruby+github&ia=web
if uninstalled standard; then
  gem install standard
fi

# ruff
# https://github.com/astral-sh/ruff
if uninstalled ruff; then
  pip install ruff
fi

if uninstalled tailwindcss-language-server; then
  npm i -g @tailwindcss/language-server
fi

# terraform-ls
# https://github.com/hashicorp/terraform-ls/blob/main/docs/installation.md#linux
if uninstalled terraform-ls; then
  # Download signing key to a new keyring
  wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  # Verify key fingerprint
  # TODO: Verify fingerprint matches downloaded key fingerprint in a more programmatic way
  gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
  verified_fingerprint="798A EC65 4E5C 1542 8C8E 42EE AA16 FCBC A621 E701"

  verify_fingerprint "$verified_fingerprint"

  # Add HashiCorpo repo
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

  sudo apt update

  sudo apt install terraform-ls
fi

# typos-lsp
# https://github.com/tekumara/typos-lsp/releases
if uninstalled typos-lsp; then
  latest=$(get_latest_gh_release_tag "tekumara" "typos-lsp")
  tgz="typos-lsp-${latest}-x86_64-unknown-linux-gnu.tar.gz"
  curl -LO "https://github.com/tekumara/typos-lsp/releases/download/${latest}/$tgz"
  mkdir extracted
  tar -xzf "$tgz" -C extracted
  sudo cp extracted/typos-lsp /usr/local/bin/typos-lsp
  rm -rf extracted "$tgz"
fi

# bash-language-server
# https://github.com/bash-lsp/bash-language-server
if uninstalled bash-language-server; then
  npm i -g bash-language-server
fi

# dockerfile-language-server-nodejs
if uninstalled dockerfile-language-server-nodejs; then
  npm i -g dockerfile-language-server-nodejs
fi

# lua-language-server
# https://github.com/LuaLS/lua-language-server/releases/tag/3.14.0
if uninstalled lua-language-server; then
  latest=$(get_latest_gh_release_tag "LuaLS" "lua-language-server")
  base_url="https://github.com/LuaLS/lua-language-server/releases/download/${latest}"
  tgz="lua-language-server-${latest}-linux-x64.tar.gz"
  curl -LO "$base_url/$tgz"
  mkdir extracted
  tar -xzf "$tgz" -C extracted
  sudo cp ./extracted/bin/lua-language-server /usr/local/bin/
  rm -rf "$tgz" extracted
fi

# marksman
# https://github.com/artempyanykh/marksman/releases
if uninstalled marksman; then
  latest=$(get_latest_gh_release_tag "artempyanykh" "marksman")
  curl -LO "https://github.com/artempyanykh/marksman/releases/download/${latest}/marksman-linux-x64"
  chmod +x marksman-linux-x64
  sudo mv marksman-linux-x64 /usr/local/bin/marksman
fi

# yaml-language-server
# https://github.com/redhat-developer/yaml-language-server
if uninstalled yaml-language-server; then
  npm i -g yaml-language-server
fi

# tflint
# https://github.com/terraform-linters/tflint
if uninstalled tflint; then
  latest=$(get_latest_gh_release_tag "terraform-linters" "tflint")
  base_url="https://github.com/terraform-linters/tflint/releases/download/${latest}"
  zip="tflint_linux_amd64.zip"
  checksums="checksums.txt"
  pem="checksums.txt.pem"
  sig="checksums.txt.keyless.sig"

  curl -L --remote-name-all \
    "$base_url/$zip" \
    "$base_url/$checksums" \
    "$base_url/$pem" \
    "$base_url/$sig"

  if cosign verify-blob --certificate=checksums.txt.pem --signature=checksums.txt.keyless.sig --certificate-identity-regexp="^https://github.com/terraform-linters/tflint" --certificate-oidc-issuer=https://token.actions.githubusercontent.com checksums.txt; then
   if sha256sum --ignore-missing -c checksums.txt; then
    unzip "$zip"
    sudo cp tflint /usr/local/bin/
    rm "$zip" "$checksums" "$pem" "$sig" tflint
  else
    echo "Checksum verification failed for tflint"
    exit 1
   fi
  else
    echo "Signature verification failed for tflint"
    exit 1
  fi
fi

# emmet-language-server
# https://github.com/olrtg/emmet-language-server
if uninstalled emmet-language-server; then
  npm i -g @olrtg/emmet-language-server
fi

# python-lsp-server
# https://github.com/python-lsp/python-lsp-server
if uninstalled pylsp; then
  pip install python-lsp-server
fi

# vim-language-server
# https://github.com/iamcco/vim-language-server
if uninstalled vim-language-server; then
  npm i -g vim-language-server
fi

# sql-language-server
# https://github.com/sqls-server/sqls
if uninstalled sqls; then
  go install github.com/sqls-server/sqls@latest
fi

# clojure-lsp
# https://github.com/clojure-lsp/clojure-lsp/releases/tag/2025.04.23-18.16.46
if uninstalled clojure-lsp; then
  latest=$(get_latest_gh_release_tag "clojure-lsp" "clojure-lsp")
  base_url="https://github.com/clojure-lsp/clojure-lsp/releases/download/${latest}"
  zip="clojure-lsp-native-linux-amd64.zip"
  sha="clojure-lsp-native-linux-amd64.zip.sha256"

  curl -L --remote-name-all \
    "$base_url/$zip" \
    "$base_url/$sha" \

  download_sha=$(sha256sum "$zip" | cut -d ' ' -f1)
  verified_sha=$(cat "$sha")

  if [ "$download_sha" = "$verified_sha" ]; then
    unzip "$zip"
    sudo cp clojure-lsp /usr/local/bin/
    rm "$zip" "$sha" clojure-lsp
  fi

fi

# cssmodules-language-server
# https://github.com/antonk52/cssmodules-language-server
if uninstalled cssmodules-language-server; then
  npm i -g cssmodules-language-server
fi

# cucumber-language-server
# https://github.com/cucumber/language-server
if uninstalled cucumber-language-server; then
  npm i -g @cucumber/language-server
fi

# prisma-language-server
# https://www.npmjs.com/package/@prisma/language-server
if uninstalled prisma-language-server; then
  npm i -g @prisma/language-server
fi

# cleanup
sudo apt autoremove -y
sudo apt autoclean -y
