#!/bin/bash

. ~/.env

. ~/.local/share/chezmoi/utils.sh

# NOTE: 'update' is alias for 'upgrade'
# dnf automatically updates cache periodically so need to manually do this
sudo dnf upgrade

# Install through the updates proxy in TemplateVM - fedora-41-xfce
install_dnf_package "strawberry"
install_dnf_package "jq"
install_dnf_package "rustup"
install_dnf_package "git-credential-oauth"
install_dnf_package "ripgrep"
install_dnf_package "git-delta"
install_dnf_package "fish"
install_dnf_package "fzf"
install_dnf_package "fd-find"
install_dnf_package "bat"
install_dnf_package "ctags"
install_dnf_package "awscli"
install_dnf_package "compat-lua"
install_dnf_package "luarocks"
install_dnf_package "jetbrains-mono-fonts-all"
install_dnf_package "neovim"
install_dnf_package "tmux"
install_dnf_package "alacritty"
install_dnf_package "ImageMagick"
install_dnf_package "zoxide"
install_dnf_package "yq"
install_dnf_package "du-dust"
install_dnf_package "kiwix-desktop"
install_dnf_package "rofi"
install_dnf_package "speedtest-cli"
install_dnf_package "feh"
install_dnf_package "xmlstarlet"
install_dnf_package "nmap"
install_dnf_package "openvpn"
install_dnf_package "wireguard-tools"
install_dnf_package "plocate"
install_dnf_package "foliate"
install_dnf_package "gnome-disk-utility"
install_dnf_package "neomutt"
install_dnf_package "electrum"
install_dnf_package "nvme-cli"
install_dnf_package "obs-studio"
install_dnf_package "bemenu"
install_dnf_package "direnv"
install_dnf_package "gitleaks"
install_dnf_package "weechat"
install_dnf_package "hexyl"
install_dnf_package "qutebrowser"
install_dnf_package "gh"
install_dnf_package "glab"
install_dnf_package "ncmpcpp"
install_dnf_package "libmpd"
install_dnf_package "qt6ct"
install_dnf_package "mpv"
install_dnf_package "usbutils"
install_dnf_package "lsd"
install_dnf_package "pandoc"
install_dnf_package "usbutils"
install_dnf_package "zathura-pdf-mupdf"
install_dnf_package "mumble"
install_dnf_package "qalculate-qt"
install_dnf_package "isync"
# NOTE: Pre-installed?
# install_dnf_package "notmuch"
install_dnf_package "urlscan"
install_dnf_package "msmtp"
install_dnf_package "abook"
install_dnf_package "tree-sitter"
# Includes clangd and clang-format
install_dnf_package "clang-tools-extra"
install_dnf_package "difftastic"

# Install COPR plugins
sudo dnf install -y dnf-plugins-core

install_dnf_copr_package "jdxcode/mise" "mise"
install_dnf_copr_package "lihaohong/yazi" "yazi"

#          ╭──────────────────────────────────────────────────────────╮
#          │                            jq                            │
#          │               https://jqlang.org/download/               │
#          ╰──────────────────────────────────────────────────────────╯
#
if uninstalled jq; then
  bin="jq-linux-amd64"
  checksums="sha256sum.txt"

  # TODO: Figure out a way to get and parse latest version without jq installed
  base_url="https://github.com/jqlang/jq/releases/download/jq-1.7.1/"

  curl -sL --remote-name-all "$base_url/${bin}" "${base_url}/${checksums}"

  verified_sha=$(grep "$bin" <"$checksums" | awk '{print $1}')
  download_sha=$(sha256sum "$bin" | awk '{print $1}')

  if [ "$download_sha" != "$verified_sha" ]; then
    echo "Could not install jq - verify checksums"
    exit 1
  fi

  chmod +x "$bin"
  sudo mv "$bin" /usr/local/bin/jq
  rm "$checksums"
  echo "Installed jq"
else
  echo "Already installed jq"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          cosign                          │
#          │            https://github.com/sigstore/cosign            │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled cosign; then
  echo "Installing cosign"
  # TODO: Ensure latest is installed rather than a static version
  version="2.5.3"
  base_url="https://github.com/sigstore/cosign/releases/download/v${version}"

  fedora_package="${base_url}/cosign-${version}.x86_64.rpm"
  pem="${base_url}/cosign-${version}.x86_64.rpm-keyless.pem"
  sig="${base_url}/cosign-${version}.x86_64.rpm-keyless.sig"

  curl -L --remote-name-all \
    "${fedora_package}" \
    "${pem}" \
    "${sig}"

  # TODO: Validate .rpm
  valid=1
  if valid; then
    sudo dnf install -y "./${fedora_package}"
  fi

  echo "Installed cosign"
else
  echo "Already installed cosign"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         chezmoi                          │
#          │                 https://www.chezmoi.io/                  │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled chezmoi; then
  echo "Installing chezmoi"
  version=$(curl -sL https://api.github.com/repos/twpayne/chezmoi/releases/latest | jq '.tag_name' | sed 's/"//g' | cut -d 'v' -f2)
  # Download .rpm pkg, the checksum file, checksum file signature, and public signing key:
  curl --silent --location --remote-name-all \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_${version}_linux_x86_64.rpm" \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_${version}_checksums.txt" \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_${version}_checksums.txt.sig" \
    "https://github.com/twpayne/chezmoi/releases/download/v$version/chezmoi_cosign.pub"

  # verify the signature on the checksums file is valid
  cosign_verification_status=$(cosign verify-blob --key=chezmoi_cosign.pub --signature="chezmoi_${version}_checksums.txt.sig" "chezmoi_${version}_checksums.txt")

  if [ "$cosign_verification_status" -eq 1 ]; then
    echo "Signatures on Chemzoi checksums file is invalid"
    exit 1
  fi

  # verify the checksum matches
  if sha256sum --check "chezmoi_${version}_checksums.txt" --ignore-missing --status; then
    sudo apt install -y "./chezmoi_${version}_linux_x86_64.rpm"
    echo "Installed chezmoi"
  else
    echo "Encountered an error "
    exit 1
  fi
else
  echo "chezmoi already installed"
fi

# Initialize dotfiles
if [ ! -d ~/.local/share/chezmoi ]; then
  echo "Initializing dotfiles"
  # initialize dotfiles
  # github
  chezmoi init https://github.com/Drew-Daniels/dotfiles.git --apply
  # codeberg
  # chezmoi init https://codeberg.org/drewdaniels/dotfiles.git --apply
  echo "Initialized dotfiles"
else
  echo "Already initialized dotfiles"
fi

# Install runtimes and default packages
mise install

# Install crates
install_crate "starship"
install_crate "jless"
install_crate "cargo_update"
install_create "mergiraf"

# Install NPM packages
# cssmodules-language-server
# https://github.com/antonk52/cssmodules-language-server
install_npm_package "cssmodules-language-server"

# Docker
# https://docs.docker.com/engine/install/fedora
install_dnf_package "gnome-terminal"
sudo dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl enable --now docker

# Install into clone of fedora-41-xfce TemplateVM with Network access
# dbeaver
# https://dbeaver.io/download/2/
if uninstalled dbeaver; then
  echo "Installing dbeaver"
  curl -LO 'https://dbeaver.io/files/dbeaver-ce-latest-stable.x86_64.rpm'
  dnf install -y './dbeaver-ce-latest-stable.x86_64.rpm'
  rm 'dbeaver-ce-latest-stable.x86_64.rpm'
  echo "Installed dbeaver"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                        bat-extras                        │
#          │     https://github.com/eth-p/bat-extras/tree/master      │
#          ╰──────────────────────────────────────────────────────────╯
pkg="bat-extras"
if uninstalled batgrep; then
  echo "Installing $pkg"
  cd ~/projects || exit
  git clone https://github.com/eth-p/$pkg.git ~/projects/bat-extras
  cd $pkg || exit
  ./build.sh --install
  cd ~ || exit
  echo "Installed $pkg"
else
  echo "Installed $pkg"
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                         luarocks                         │
#          │                  https://luarocks.org/                   │
#          ╰──────────────────────────────────────────────────────────╯
version="3.11.1"
if uninstalled luarocks; then
  echo "Installing luarocks"
  wget https://luarocks.org/releases/luarocks-${version}.tar.gz
  tar zxpf luarocks-${version}.tar.gz
  cd "luarocks-${version}" || exit
  ./configure
  make
  sudo make install
  sudo luarocks install luasocket
  cd ~ || exit
  echo "Installed luarocks"
else
  echo "Already installed luarocks"
fi

# cmus
# https://cmus.github.io/#download
if uninstalled cmus; then
  git clone https://github.com/cmus/cmus.git ~/projects/cmus
  cd ~/projects/cmus || exit
  ./configure prefix="$HOME"/cmus
  make install
fi

#          ╭──────────────────────────────────────────────────────────╮
#          │                          cmusfm                          │
#          │              https://github.com/Arkq/cmusfm              │
#          ╰──────────────────────────────────────────────────────────╯
if uninstalled cmusfm; then
  echo "Installing cmusfm"
  # Clone
  git clone https://github.com/arkq/cmusfm.git ~/projects/cmusfm
  cd ~/projects/cmusfm || exit
  # install dependencies
  sudo apt install -y libcurl4-openssl-dev libnotify-dev
  # configure
  autoreconf --install
  mkdir build && cd build || exit
  ../configure --enable-libnotify
  # build & install
  make && make install
  cd ~ || exit
  echo "Installed cmusfm"
else
  echo "Already installed cmusfm"
fi

# Mullvad
# https://mullvad.net/en/download/vpn/linux
if uninstalled mullvad; then
  # Add the Mullvad repository server to dnf
  sudo dnf config-manager addrepo --from-repofile=https://repository.mullvad.net/rpm/stable/mullvad.repo

  # Fedora 40 and earlier
  # Add the Mullvad repository server to dnf
  sudo dnf config-manager --add-repo https://repository.mullvad.net/rpm/stable/mullvad.repo

  # Install the package
  sudo dnf install mullvad-vpn
fi

# TODO: usbimager
# https://gitlab.com/bztsrc/usbimager

# Zulip
# https://desktop-download.zulip.com/v5.12.0/Zulip-5.12.0-x86_64.AppImage
# if uninstalled zulip; then
#   version="5.12.0"
#   pkg="Zulip-${version}-x86_64.AppImage"
#   curl -LO "https://desktop-download.zulip.com/v${version}/${pkg}"
#   chmod a+x "$pkg"
#   sudo mv "$pkg" /usr/local/bin/zulip
# fi

# signal
if uninstalled signal-desktop; then
  dnf config-manager addrepo --from-repofile=https://download.opensuse.org/repositories/network:im:signal/Fedora_41/network:im:signal.repo
  dnf install signal-desktop
fi

# electrum-ltc
if uninstalled electrum-ltc; then
  echo "Installing electrum-ltc"

  version="4.2.2.1"
  pkg="electrum-ltc-${version}-x86_64.AppImage"
  sig="${pkg}.asc"

  curl -sL --remote-name-all "$pkg" "$sig"

  valid=1
  if valid; then
    chmod +x "./$pkg"
    sudo mv "${pkg}" /usr/local/bin/electrum-ltc
    rm "$pkg" "$sig"
  fi

  echo "Installed electrum-ltc"
fi

if uninstalled protonmail; then
  version="1.9.0"
  pkg="ProtonMail-desktop-beta.rpm"
  curl -sLO "https://proton.me/download/mail/linux/${version}/${pkg}"
  sudo dnf install -y "./$pkg"
fi

if uninstalled protonmail-bridge; then
  version="3.21.2-1"
  pkg="protonmail-bridge-${version}.x86_64.rpm"
  curl -sLO "https://proton.me/download/bridge/$pkg"
  sudo dnf install -y "./$pkg"
fi

# Language Servers
# terraform-ls
#
if uninstalled terraform-ls; then
  version="0.36.5"
  pkg="terraform-ls_${version}_linux_amd64.zip"
  shasums="terraform-ls_${version}_SHA256SUMS"
  sig="terraform-ls_${version}_SHA256SUMS.sig"
  base_url="https://releases.hashicorp.com/terraform-ls/${version}"

  curl -sL --remote-name-all \
    "${base_url}/${pkg}" \
    "${base_url}/${shasums}" \
    "${base_url}/${sig}"

  # TODO: validate
  valid=1
  if valid; then
    unzip "$pkg"
    sudo mv "$pkg" /usr/local/bin/terraform-ls
  fi

fi

# typos-lsp
# https://github.com/tekumara/typos-lsp/releases
if uninstalled typos-lsp; then
  echo "Installing typos-lsp"
  cargo binstall --git https://github.com/tekumara/typos-lsp typos-lsp
  echo "Installed typos-lsp"
fi

# marksman
# https://github.com/artempyanykh/marksman/releases
if uninstalled marksman; then
  latest=$(get_latest_gh_release_tag "artempyanykh" "marksman")
  curl -LO "https://github.com/artempyanykh/marksman/releases/download/${latest}/marksman-linux-x64"
  chmod +x marksman-linux-x64
  sudo mv marksman-linux-x64 /usr/local/bin/marksman
fi
# lua-language-server
# https://github.com/LuaLS/lua-language-server/releases/tag/3.14.0
if uninstalled lua-language-server; then
  latest=$(get_latest_gh_release_tag "LuaLS" "lua-language-server")
  base_url="https://github.com/LuaLS/lua-language-server/releases/download/${latest}"
  tgz="lua-language-server-${latest}-linux-x64.tar.gz"
  curl -LO "$base_url/$tgz"
  mkdir extracted
  tar -xzf "$tgz" -C extracted
  sudo cp ./extracted/bin/lua-language-server /usr/local/bin/
  rm -rf "$tgz" extracted
fi

# tflint
# https://github.com/terraform-linters/tflint
if uninstalled tflint; then
  latest=$(get_latest_gh_release_tag "terraform-linters" "tflint")
  base_url="https://github.com/terraform-linters/tflint/releases/download/${latest}"
  zip="tflint_linux_amd64.zip"
  checksums="checksums.txt"
  pem="checksums.txt.pem"
  sig="checksums.txt.keyless.sig"

  curl -L --remote-name-all \
    "$base_url/$zip" \
    "$base_url/$checksums" \
    "$base_url/$pem" \
    "$base_url/$sig"

  if cosign verify-blob --certificate=checksums.txt.pem --signature=checksums.txt.keyless.sig --certificate-identity-regexp="^https://github.com/terraform-linters/tflint" --certificate-oidc-issuer=https://token.actions.githubusercontent.com checksums.txt; then
    if sha256sum --ignore-missing -c checksums.txt; then
      unzip "$zip"
      sudo cp tflint /usr/local/bin/
      rm "$zip" "$checksums" "$pem" "$sig" tflint
    else
      echo "Checksum verification failed for tflint"
      exit 1
    fi
  else
    echo "Signature verification failed for tflint"
    exit 1
  fi
fi

# clojure-lsp
# https://github.com/clojure-lsp/clojure-lsp/releases/tag/2025.04.23-18.16.46
if uninstalled clojure-lsp; then
  latest=$(get_latest_gh_release_tag "clojure-lsp" "clojure-lsp")
  base_url="https://github.com/clojure-lsp/clojure-lsp/releases/download/${latest}"
  zip="clojure-lsp-native-linux-amd64.zip"
  sha="clojure-lsp-native-linux-amd64.zip.sha256"

  curl -L --remote-name-all \
    "$base_url/$zip" \
    "$base_url/$sha"

  download_sha=$(sha256sum "$zip" | cut -d ' ' -f1)
  verified_sha=$(cat "$sha")

  if [ "$download_sha" = "$verified_sha" ]; then
    unzip "$zip"
    sudo cp clojure-lsp /usr/local/bin/
    rm "$zip" "$sha" clojure-lsp
  else
    echo "Could not verify clojure-lsp download SHA"
    exit 1
  fi
fi

# obsidian
#
if uninstalled obsidian; then
  echo "Installing Obsidian"
  version="1.9.10"
  pkg="obsidian_${version}_amd64.AppImage"
  # TODO: Download latest release
  # NOTE: When initially syncing vaults, may need to rm -rf ~/vaults/<vault-name> so Obsidian can create a new <vault-name> folder in ~/vaults
  curl -LO "https://github.com/obsidianmd/obsidian-releases/releases/download/${version}/$pkg"
  chmod +x "./$pkg"
  sudo mv "$pkg" /usr/local/bin/obsidian
  echo "Installed Obsidian"
fi

if uninstalled stylua; then
  version="2.1.0"
  pkg="stylua-linux-x86_64.zip"
  curl -sLO "https://github.com/JohnnyMorganz/StyLua/releases/download/v${version}/${pkg}"
  unzip "$pkg"
  sudo mv stylua /usr/local/bin/stylua
fi

# phpactor
# https://phpactor.readthedocs.io/en/master/usage/standalone.html#global-installation
if uninstalled phpactor; then
  curl -LO "https://github.com/phpactor/phpactor/releases/latest/download/phpactor.phar"
  chmod a+x phpactor.phar
  sudo mv phpactor.phar /usr/local/bin/phpactor
fi
